namespace KuzApps.Infra.MyTestData;

/// <summary>
/// Тестовые данные информационных постов
/// </summary>
public class PostTestData
{
    /// <summary>
    /// Заполнение базы данных тестовыми данными информационных постов
    /// </summary>
    public async Task PopulateTestData(IServiceProvider provider, DbContext context)
    {
        var logger = provider.GetRequiredService<ILogger<PostTestData>>();
        var admin = context.Set<User>().FirstOrDefault(x => x.UserName == "admin");

        logger.LogInformation("Начало заполнения тестовыми данными информационных постов ...");

        var categoryCsharpClr = new Category
        {
            BookName = "csharpdotnet",
            Name = "CLR C#",
            Order = 1,
        };
        var categoryCsharpTypes = new Category
        {
            BookName = "csharpdotnet",
            Name = "Типы C#",
            Order = 2,
        };
        var categoryCsharpDataTypes = new Category
        {
            BookName = "csharpdotnet",
            Name = "Типы данных C#",
            Order = 3,
        };
        var categoryCsharpMechanics = new Category
        {
            BookName = "csharpdotnet",
            Name = "Механизмы C#",
            Order = 4,
        };
        var categoryCsharpThreads = new Category
        {
            BookName = "csharpdotnet",
            Name = "Многопоточность C#",
            Order = 5,
        };
        var categoryDesktopXaml = new Category
        {
            BookName = "csharpdesktop",
            Name = "WPF и XAML",
            Order = 1,
        };
        var categoryWebPlatform = new Category
        {
            BookName = "csharpweb",
            Name = "ASP.NET Core",
            Order = 1,
        };
        context.Set<Category>().AddRange(categoryCsharpClr, categoryCsharpTypes, categoryCsharpDataTypes, categoryCsharpMechanics, categoryCsharpThreads);
        context.Set<Category>().AddRange(categoryDesktopXaml, categoryWebPlatform);
        await context.SaveChangesAsync();

        var postIntro = new Post
        {
            Date = DateTime.Now.AddDays(-60),
            Status = Status.Public,
            Title = "Введение в платформу .NET",
            Body = @"
<h2>Введение в платформу .NET</h2>
<p>10 ноября 2020 года Микрософты выпустили C# 9 & .NET 5. Как и C# 8, C# 9 связан с версией фреймворка и платформы и будет работать на .NET 5 и выше. .NET 5 - продолжение .NET Core.</p>
<p>.NET Core позволяет разрабатывать веб приложения и сервисы на Windows, iOS & Linux, мобильные приложения на Android & iOS, а также настольные приложения только на Windows.</p>
<h4>Общеязыковая среда исполнения Core Runtime</h4>
<p>Формально можно разделить на CoreCLR & CoreFX. С точки зрения прогера .NET Core - это общеязыковая среда исполнения и всеоблеющая библиотека базовых классов.</p>
<p>Слой исполнения содержит минимальную реализацию, специфичную для платформы (Windows, iOS, Linux, Android) и архитектуры (x86, x64, ARM), использует все базовые типы .NET Core.</p>
<h4>Общая система типов CTS</h4>
<p>Спецификация Common Type System (CTS) описывает все типы и все программные конструкции, поддерживаемые средой исполнения, спецификации их работы, описанные в виде метаданных.</p>
<p>Поле - переменная, являющаяся частью состояния объекта.</p>
<p>Метод - функция, выполняющая операцию с объектом, часто с изменением его состояния.</p>
<p>Свойство - выглядить как поле, но в реализации типа является методом (или двумя методами).</p>
<p>Событие - для создания меанизма оповещения между объектом и другими заинтересованными объектами.</p>
<p>Класс, основан на парадигме ООП, основа - ссылочный тип, содержит: конструкторы, свойства, методы, события и поля.</p>
<p>Интерфейс - именованная коллекция абстрактных членов (и/или реализаций по умолчанию) класса.</p>
<p>Структура - легковесная реализация класса, основа - значимый тип, содержит контструкторы, методы и поля.</p>
<p>Перечисление - удобная структура комбинаций ключ-значение на основе значимого типа.</p>
<p>Делегат - типобезопасный эквивалент указателя на функцию языка С. Служит для реализации функции обртного вызова.</p>
<h4>Общеязыковая спецификация CLS</h4>
<p>Так как не все языки платформы .NET Core поддерживают все что есть в общей системе типов, есть спецификация CLS, в которой описаны типы, которые должен поддерживать всякий язык платфонмы.</p>
<p>Это подмножество, описанное в общей системе типов CTS.</p>
<p>Спецификация CLS - набор подробных правил, описывающих минимальное и полное множество характеристик, который отдельный компилятор .NET должен поддерживать, чтобы генерировать код, обслуживаемый средой CLR и в тоже время доступный другим языкам, также ориентированных на эту платформу. Можно рассматривать общеязыковую спецификацию CLS как подмножество полной функциональнотси, определенной в общей системе типов CTS.</p>
<p>Это набор правил, которых должны придерживатся создатели компиляторов, если они намерены обеспечивать работу своих сборок в платформе .NET.</p>
<p>Сообщить компилятору о том, что он должен сделать проверку на совместимость с CLS в проекте:</p>
<pre><code>
[assembly: CLSCompliant(true)]
</code></pre>
<h4>Библиотека базовых классов</h4>
<p>Платформа содержит библиотеку базовых классов BCL, которая доступная на всех языках платформы. Она описывает типы, которые могут быть использованы для разработки любого программного обеспечения и компонентов.</p>
<h4>Стандартная инфраструктура разработки библиотек</h4>
<p>.NET Standard описывает типы, которые поддерживаются как .NET Core, так и старой платформой .NET Framework.</p>
<h4>Управляемый и неуправляемый код</h4>
<p>Код, написанный и нацеленный на исполнение в среде .NET Core, является управляемым. Код, не выполняемый в среде .NET Core, является неуправляемым. Оба кода могут быть взяимосвязаны.</p>
<p>Двоичные модули, .NET внутренне устроены совершенно отлично от неуправляемых (*.dll и *.exe). Они содержат не специфические, а независимые от платформы инструкции на промежуточном языке и метаданные типов. В отличие от старой платформы .NET Framework, в новой .NET Core всегда компилируются только файлы с расширением *.dll, в том числе и выполняемые.</p>
",
            Category = categoryCsharpClr,
            User = admin,
        };
        context.Set<Post>().AddRange(postIntro);
        await context.SaveChangesAsync();

        logger.LogInformation("Конец заполнения тестовыми данными информационных постов");
    }
}
